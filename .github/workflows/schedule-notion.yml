name: 노션이벤트 기반 디스코드 알리미 주기적 트리거
        
on:
  schedule:
    - cron: '*/10 * * * *'
    # NOTE: 이것만 변경한다고 되는 것이 아니라 노션 DB에서 값 가져오는 기준도 바꿔야 함

jobs:
  record-times:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # 이전 아티팩트 다운로드
    - name: Download previous artifacts
      uses: actions/download-artifact@v3
      with:
        name: workflow-run-timestamp
        path: temp

    # 파일 업데이트 및 새 시간 기록
    - name: Update and record times
      if: success() || failure()
      run: |
        mkdir -p artifact
        # second-to-last.txt 업데이트
        if [ -f temp/first-to-last.txt ]; then
          cp temp/first-to-last.txt artifact/second-to-last.txt
        fi
        # 현재 시간을 first-to-last.txt에 기록
        echo `date -u +"%Y-%m-%dT%H:%M:%SZ"` > artifact/first-to-last.txt

    # 아티팩트 업로드
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: workflow-run-timestamp
        path: artifact/

  check-kanban-board:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: make install-without-venv

      - name: Download run timestamps
        uses: actions/download-artifact@v3
        with:
          name: workflow-run-timestamp
          path: artifact

      - name: Set run timestamps as env
        run: |
          if [ -f artifact/first-to-last.txt ]; then
            echo "FIRST_TO_LAST=$(cat artifact/first-to-last.txt)" >> $GITHUB_ENV
          fi
          if [ -f artifact/second-to-last.txt ]; then
            echo "SECOND_TO_LAST=$(cat artifact/second-to-last.txt)" >> $GITHUB_ENV
          fi

      - name: Send Notification to Discord
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          NOTION_KANBANBOARD_DB_ID: ${{ secrets.NOTION_KANBANBOARD_DB_ID }}
        run: python3 -m nodification.examples.kanban

  check-project-note:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: make install-without-venv

      - name: Download run timestamps
        uses: actions/download-artifact@v3
        with:
          name: workflow-run-timestamp
          path: artifact

      - name: Set run timestamps as env
        run: |
          if [ -f artifact/first-to-last.txt ]; then
            echo "FIRST_TO_LAST=$(cat artifact/first-to-last.txt)" >> $GITHUB_ENV
          fi
          if [ -f artifact/second-to-last.txt ]; then
            echo "SECOND_TO_LAST=$(cat artifact/second-to-last.txt)" >> $GITHUB_ENV
          fi

      - name: Send Notification to Discord
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          NOTION_PROJECTNOTE_DB_ID: ${{ secrets.NOTION_PROJECTNOTE_DB_ID }}
        run: python3 -m nodification.examples.project

  check-permanent-note:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: make install-without-venv

      - name: Download run timestamps
        uses: actions/download-artifact@v3
        with:
          name: workflow-run-timestamp
          path: artifact

      - name: Set run timestamps as env
        run: |
          if [ -f artifact/first-to-last.txt ]; then
            echo "FIRST_TO_LAST=$(cat artifact/first-to-last.txt)" >> $GITHUB_ENV
          fi
          if [ -f artifact/second-to-last.txt ]; then
            echo "SECOND_TO_LAST=$(cat artifact/second-to-last.txt)" >> $GITHUB_ENV
          fi

      - name: Send Notification to Discord
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          NOTION_PERMANENTNOTE_DB_ID: ${{ secrets.NOTION_PERMANENTNOTE_DB_ID }}
        run: python3 -m nodification.examples.permanent
